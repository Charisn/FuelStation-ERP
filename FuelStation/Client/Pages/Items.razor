@page "/itemList"
@layout StaffLayout

@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager



<div style="text-align:center">
    @if (!DeleteMode)
    {
        <h3>Current Items (@_itemList.Count())</h3>        
    }
    @if (DeleteMode)
    {
        <h3>Expired/Sold Items (@_itemList.Count())</h3>        
    }
    <br>
    <EditForm Model="@_itemView">
        <div class="form-group form-control">
            <div class="input-group" style="align-items:center">
                <input class="form-control" @onkeyup=InputOnEnterClick @bind=_itemView.Code placeholder="Code" />
                <input class="form-control" @onkeyup=InputOnEnterClick @bind=_itemView.Description placeholder="Description" />
                <input class="form-control" @onkeyup=InputOnEnterClick @bind=_itemView.Price placeholder="Price" />
                <input class="form-control" @onkeyup=InputOnEnterClick  @bind=_itemView.Cost placeholder="Cost" />
            </div>
        </div>
        <br>
        <InputSelect @bind-Value="_itemView.ItemType" class="btn btn-secondary dr opdown-toggle" style="padding: 10px;">
            <option selected color="white" value="0" > Select Type </option>
            @foreach (var type in Enum.GetValues(typeof(ItemTypeEnum)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
        <br><br>
        <button class="btn btn:hover " @onclick="AddItem">Add Item</button>

    </EditForm>
</div>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Code</th>
            <th>Description</th>
            <th>Price</th>
            <th>Cost</th>
            <th>Item Type</th>
            <th>
                  <button class="btn btn-warning" @onclick="OnInitializedAsync">Deleted</button>
                  <button class="btn btn-outline-dark" @onclick="() => EditMode = !EditMode">Edit</button>
            </th>
        </tr>
    </thead>
    <tbody>

@if (isLoading)
        {
            <tr>
                <td>
                    <div class="spinner-border" role="status"></div>
                </td>
                <td>
                    <div class="spinner-border" role="status"></div>
                </td>
                <td>
                    <div class="spinner-border" role="status"></div>
                </td>
                <td>
                    <div class="spinner-border" role="status"></div>
                </td>
                <td>
                    <div class="spinner-border" role="status"></div>
                </td>
                <td>
                    <div class="spinner-border" role="status"></div>
                </td>
            </tr>
        }
        @if(EditMode)
        {
            @foreach (var item in _itemList)
            {
                <tr>
                    <td><input class="form-control" @bind="item.Code" readonly /> </td>
                    <td><input class="form-control" @bind="item.Description" readonly /></td>
                    <td><input class="form-control" @bind="item.Price" readonly /></td>
                    <td><input class="form-control" @bind="item.Cost" readonly /></td>
                    <td>
                        <EditForm Model="@item">
                            <InputSelect @bind-Value="item.ItemType" class="btn btn-secondary dropdown-toggle">
                                @foreach (var itemType in Enum.GetValues(typeof(ItemTypeEnum)))
                                {
                                    <option value="@itemType" disabled> @itemType </option>
                                }
                        </InputSelect>
                    </EditForm>
                </td>
                <td>
                    @if (DeleteMode)
                        {
                           <td><button class="btn btn-outline-success" @onclick="() => SaveItem(item)">Save</button></td> 
                           <td><button class="btn btn-outline-warning" @onclick="()=> DeleteItem(item)"> Undo</button> </td>                  
                        } 
                        @if (!DeleteMode)
                        {
                            <td><button class="btn btn-outline-success" @onclick="() => SaveItem(item)">Save</button></td>
                            <td> <button class="btn btn-outline-danger" @onclick="() => DeleteItem(item)">Delete</button></td>
                        }
                    </td>
            </tr>
            }
        }
        @if (!EditMode)
        {
            @foreach (var item in _itemList)
            {
                <tr>
                    <td><input class="form-control" @bind="item.Code"/> </td>
                    <td><input class="form-control" @bind="item.Description"/></td>
                    <td><input class="form-control" @bind="item.Price"/></td
                    <td><input class="form-control" @bind="item.Cost"/></td>
                    <td>
                        <EditForm Model="@item">
                            <InputSelect @bind-Value="item.ItemType" class="btn btn-secondary dropdown-toggle">
                                @foreach (var employeeType in Enum.GetValues(typeof(ItemTypeEnum)))
                                {
                            <option value="@employeeType" > @employeeType </option>
                                }
                    </InputSelect>
                </EditForm>
            </td>
            <td>
                @if (DeleteMode)
                        {
                            <td><button class="btn btn-outline-success" @onclick="() => SaveItem(item)">Save</button></td> 
                            <td><button class="btn btn-outline-warning" @onclick="()=> DeleteItem(item)"> Undo</button> </td>
                        } 
                        @if (!DeleteMode)
                        {
                            <td><button class="btn btn-outline-success" @onclick="() => SaveItem(item)">Save</button></td>
                            <td> <button class="btn btn-outline-danger" @onclick="() => DeleteItem(item)">Delete</button></td>
                        }
                    </td>
                </tr>
            }
        }

</tbody>   
</table>


@code {

    private ItemViewModel _itemView { get; set; } = new();

    List<ItemViewModel> _itemList = new();

    bool isLoading = true;

    internal bool EditMode = true;

    internal bool DeleteMode = true;

    protected override async Task OnInitializedAsync()
    {
        _itemView.Price = null;
        DeleteMode = !DeleteMode;
        if (DeleteMode)
        {
            await LoadDeletedItemFromServer();
        }
        else
        {
            await LoadItemFromServer();

        }
        isLoading = false;
    }

    private async Task LoadItemFromServer()
    {
        _itemList = await httpClient.GetFromJsonAsync<List<ItemViewModel>>("item");
    }
    private async Task LoadDeletedItemFromServer()
    {
        _itemList = await httpClient.GetFromJsonAsync<List<ItemViewModel>>("item/statusfalse");
    }

    async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(_itemView.Code) 
                || string.IsNullOrWhiteSpace(_itemView.Description) 
                || _itemView.Price == 0 
                || _itemView.Cost == 0 
                || _itemView.ItemType == 0 
                || _itemView.Cost == null 
                || _itemView.Price == null)
        {
            await jsRuntime.InvokeVoidAsync("window.alert", ("All fields Are Required!"));
            return;
        }
        if(_itemView.Price <= 0 || _itemView.Cost <= 0)
        {
            await jsRuntime.InvokeVoidAsync("window.alert", ("Cost and Price can only be positive Numbers"));
            return;
        }

        foreach (var itemCheckItem in _itemList)
        {
            if (itemCheckItem.Code == _itemView.Code)
            {
                await jsRuntime.InvokeVoidAsync("window.alert", ($"There is already an Item with Code {_itemView.Code}"));
                return;
            };
        }
        if (_itemView.Price > _itemView.Cost)
        {
            await httpClient.PostAsJsonAsync("item", _itemView);
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("window.alert", ("Price cannot be lower than Cost"));
            return;
        }

        _itemView = new();
        _itemView.Code = string.Empty;
        _itemView.Description = string.Empty;
        _itemView.Price = null;
        _itemView.Cost = null;
        _itemView.ItemType = 0;
        await LoadItemFromServer();
    }

    async Task DeleteItem(ItemViewModel itemToDelete)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"item/{itemToDelete.ID}");
            response.EnsureSuccessStatusCode();
            await LoadItemFromServer();
        }
    }
    async Task InputOnEnterClick(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddItem();
        }
    }

    async Task SaveItem(ItemViewModel item)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm)
        {
            var response = await httpClient.PutAsJsonAsync("item", item);
            response.EnsureSuccessStatusCode();
            await LoadItemFromServer();
        }
    }
}